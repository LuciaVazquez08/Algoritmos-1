// bloque try-catch para checked exceptions

try {
    // Código que puede generar una excepción
    int resultado = 10 / 0;     // Esto generará una ArithmeticException
} catch (ArithmeticException e) {
    // Manejo de la excepción
    System.out.println("Error: División por cero. " + e.getMessage());
}

//para multiples definimos primero las especializadas y luego las generales
try {
    // Código que puede generar una excepción
} catch (NumberFormatException | IndexOutOfBoundsException  e) {
    // Manejo de la excepción NumberFormatException o IndexOutOfBoundsException
} catch (IllegalArgumentException e) {
    // Manejo de la excepción IllegalArgumentException
} catch (RuntimeException e) {
    // Manejo de la excepción RuntimeException
} catch (Exception e) {
    // Manejo de la excepción Exception
}

//BLOQUE FINALLY - siempre se ejecuta: es para tareas de limpieza
try {
    // Código que puede generar una excepción
} catch (IOException e) {
    // Manejo de la excepción
} finally {
    // Código que se ejecutará siempre
}

// en metodos
public void miMetodo() throws MiAppException {
    // Código que puede generar MiAppException
}

// construir excepcion
public class MiAppException extends Exception {
    public MiAppException() {
        super("Error en MiApp");
    }

    public MiAppException(String mensaje) {
        super(mensaje);
    }
}

// arreglo que gurda infor de las excepciones
catch (RuntimeException e) {
    StackTraceElement elementos[] = e.getStackTrace();
    for (int i = 0; i < elementos.length; i++) {       
        System.err.println(
            elementos[i].getMethodName() + "("
            + elementos[i].getFileName() + ":"
            + elementos[i].getLineNumber() + ")"
        );
    }
}
